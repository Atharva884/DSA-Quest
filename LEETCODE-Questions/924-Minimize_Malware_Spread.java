class Solution {
    // Find by Union
    public void union(int x, int y, int[] par, int[] rank){
        int px = find(x, par);
        int py = find(y, par);

        if(px == py){
            return;
        }

        if(rank[px] > rank[py]){
            par[py] = px;
        }else if(rank[px] < rank[py]){
            par[px] = py;
        }else{
            par[px] = py;
            rank[py]++;
        }
    }

    public int find(int x, int[] par){
        if(x == par[x]){
            return x;
        }

        int temp = find(par[x], par);
        par[x] = temp;

        return temp;
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int m = initial.length;

        int[] par = new int[n];
        int[] rank = new int[n];

        for(int i=0; i<n; i++){
            par[i] = i;
            rank[i] = 1;
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<i+1; j++){
                if(graph[i][j] == 1){
                    union(i, j, par, rank);
                }
            }
        }

        // Once done with DSU, build size and infected
        int[] size = new int[n];
        int[] infCount = new int[n];

        for(int i=0; i<n; i++){
            int leader = find(i, par);
            size[leader]++;
        }

        for(int i=0; i<m; i++){
            int leader = find(initial[i], par);
            infCount[leader]++;
        }

        Arrays.sort(initial);

        int ans = initial[0];
        int max = Integer.MIN_VALUE;
        for(int i=0; i<m; i++){
            int leader = find(initial[i], par);
            int cnt = infCount[leader];
            int sze = size[leader];

            if(cnt == 1 && sze > max){
                ans = initial[i];
                max = sze;
            }
        }

        return ans;
    }
}