class Solution {
    public boolean bfs(int src, int[][] graph, int[] vis) {
        Queue<Integer> q = new LinkedList<>();
        q.add(src);
        vis[src] = 10;

        while (q.size() != 0) {
            int rem = q.poll();

            for (int nbr : graph[rem]) {
                if (vis[nbr] == -1) {
                    if (vis[rem] == 10) {
                        vis[nbr] = 12;
                    } else {
                        vis[nbr] = 10;
                    }
                    q.add(nbr);
                } else {
                    if (vis[nbr] == vis[rem]) {
                        return false;
                    }
                }
            }
        }

        return true;
    }

    public boolean isBipartite(int[][] graph) {
        int n = graph.length;

        int[] vis = new int[n];
        Arrays.fill(vis, -1);

        for (int i = 0; i < n; i++) {
            if (vis[i] == -1) {
                boolean flag = bfs(i, graph, vis);

                if (flag == false) {
                    return false;
                }
            }
        }

        return true;
    }
}